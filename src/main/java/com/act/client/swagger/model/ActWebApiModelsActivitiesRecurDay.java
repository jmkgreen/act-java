/*
 * act.web.api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.act.client.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Specifiying the day of a recurrence.
 */
@ApiModel(description = "Specifiying the day of a recurrence.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-08-23T12:00:13.972Z")
public class ActWebApiModelsActivitiesRecurDay {
  @JsonProperty("dayAsInt")
  private Integer dayAsInt = null;

  /**
   * Gets or Sets daysOfWeek
   */
  public enum DaysOfWeekEnum {
    SUNDAY("Sunday"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday");

    private String value;

    DaysOfWeekEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DaysOfWeekEnum fromValue(String text) {
      for (DaysOfWeekEnum b : DaysOfWeekEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("daysOfWeek")
  private List<DaysOfWeekEnum> daysOfWeek = null;

  /**
   * Describing the TypedDay (Day, WeekDay or Weekend Day) for the recurrence pattern when DayType is \&quot;Typed\&quot;.
   */
  public enum TypedDayEnum {
    NONE("None"),
    
    DAY("Day"),
    
    WEEKDAY("Weekday"),
    
    WEEKENDDAY("WeekendDay");

    private String value;

    TypedDayEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypedDayEnum fromValue(String text) {
      for (TypedDayEnum b : TypedDayEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("typedDay")
  private TypedDayEnum typedDay = null;

  /**
   * Describing the day-portion of the recurrence pattern.
   */
  public enum DayTypeEnum {
    NONE("None"),
    
    NUMBERED("Numbered"),
    
    NAMED("Named"),
    
    TYPED("Typed");

    private String value;

    DayTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DayTypeEnum fromValue(String text) {
      for (DayTypeEnum b : DayTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("dayType")
  private DayTypeEnum dayType = null;

  /**
   * Describes recurrence in relative terms for certain recurrence patterns (i.e. First, Third, Last) .
   */
  public enum OrdinalEnum {
    NONE("None"),
    
    FIRST("First"),
    
    SECOND("Second"),
    
    THIRD("Third"),
    
    FOURTH("Fourth"),
    
    LAST("Last");

    private String value;

    OrdinalEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrdinalEnum fromValue(String text) {
      for (OrdinalEnum b : OrdinalEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("ordinal")
  private OrdinalEnum ordinal = null;

  public ActWebApiModelsActivitiesRecurDay dayAsInt(Integer dayAsInt) {
    this.dayAsInt = dayAsInt;
    return this;
  }

   /**
   * An integer representation of the day of the week portion of a recurrence pattern.
   * @return dayAsInt
  **/
  @ApiModelProperty(value = "An integer representation of the day of the week portion of a recurrence pattern.")
  public Integer getDayAsInt() {
    return dayAsInt;
  }

  public void setDayAsInt(Integer dayAsInt) {
    this.dayAsInt = dayAsInt;
  }

  public ActWebApiModelsActivitiesRecurDay daysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
    return this;
  }

  public ActWebApiModelsActivitiesRecurDay addDaysOfWeekItem(DaysOfWeekEnum daysOfWeekItem) {
    if (this.daysOfWeek == null) {
      this.daysOfWeek = new ArrayList<DaysOfWeekEnum>();
    }
    this.daysOfWeek.add(daysOfWeekItem);
    return this;
  }

   /**
   * Representation of the day of the week portion of a recurrence pattern.
   * @return daysOfWeek
  **/
  @ApiModelProperty(value = "Representation of the day of the week portion of a recurrence pattern.")
  public List<DaysOfWeekEnum> getDaysOfWeek() {
    return daysOfWeek;
  }

  public void setDaysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
  }

  public ActWebApiModelsActivitiesRecurDay typedDay(TypedDayEnum typedDay) {
    this.typedDay = typedDay;
    return this;
  }

   /**
   * Describing the TypedDay (Day, WeekDay or Weekend Day) for the recurrence pattern when DayType is \&quot;Typed\&quot;.
   * @return typedDay
  **/
  @ApiModelProperty(value = "Describing the TypedDay (Day, WeekDay or Weekend Day) for the recurrence pattern when DayType is \"Typed\".")
  public TypedDayEnum getTypedDay() {
    return typedDay;
  }

  public void setTypedDay(TypedDayEnum typedDay) {
    this.typedDay = typedDay;
  }

  public ActWebApiModelsActivitiesRecurDay dayType(DayTypeEnum dayType) {
    this.dayType = dayType;
    return this;
  }

   /**
   * Describing the day-portion of the recurrence pattern.
   * @return dayType
  **/
  @ApiModelProperty(value = "Describing the day-portion of the recurrence pattern.")
  public DayTypeEnum getDayType() {
    return dayType;
  }

  public void setDayType(DayTypeEnum dayType) {
    this.dayType = dayType;
  }

  public ActWebApiModelsActivitiesRecurDay ordinal(OrdinalEnum ordinal) {
    this.ordinal = ordinal;
    return this;
  }

   /**
   * Describes recurrence in relative terms for certain recurrence patterns (i.e. First, Third, Last) .
   * @return ordinal
  **/
  @ApiModelProperty(value = "Describes recurrence in relative terms for certain recurrence patterns (i.e. First, Third, Last) .")
  public OrdinalEnum getOrdinal() {
    return ordinal;
  }

  public void setOrdinal(OrdinalEnum ordinal) {
    this.ordinal = ordinal;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActWebApiModelsActivitiesRecurDay actWebApiModelsActivitiesRecurDay = (ActWebApiModelsActivitiesRecurDay) o;
    return Objects.equals(this.dayAsInt, actWebApiModelsActivitiesRecurDay.dayAsInt) &&
        Objects.equals(this.daysOfWeek, actWebApiModelsActivitiesRecurDay.daysOfWeek) &&
        Objects.equals(this.typedDay, actWebApiModelsActivitiesRecurDay.typedDay) &&
        Objects.equals(this.dayType, actWebApiModelsActivitiesRecurDay.dayType) &&
        Objects.equals(this.ordinal, actWebApiModelsActivitiesRecurDay.ordinal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayAsInt, daysOfWeek, typedDay, dayType, ordinal);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActWebApiModelsActivitiesRecurDay {\n");
    
    sb.append("    dayAsInt: ").append(toIndentedString(dayAsInt)).append("\n");
    sb.append("    daysOfWeek: ").append(toIndentedString(daysOfWeek)).append("\n");
    sb.append("    typedDay: ").append(toIndentedString(typedDay)).append("\n");
    sb.append("    dayType: ").append(toIndentedString(dayType)).append("\n");
    sb.append("    ordinal: ").append(toIndentedString(ordinal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

